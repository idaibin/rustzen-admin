# Rustzen Project Philosophy & Conventions

## 🌿 The Rustzen Philosophy

**Rustzen** = **Rust** + **Zen**

Core principles:

-   **简约而不简单** (Simple but not simplistic)
-   **大道至简** (The great way is simple)
-   **每一层都能自圆其说** (Every layer should justify its existence)
-   **AI 友好** (AI-friendly architecture)

## 🎯 Project Conventions

### 1. Dependency Management

-   **Never modify `Cargo.toml` directly**
-   Always use `cargo add <package>` for new dependencies
-   Get user confirmation before adding new dependencies
-   Keep dependencies minimal and purposeful

### 2. Version Control & Commits

-   **Commit messages must be in English**
-   Use conventional commit format when possible
-   Update `CHANGELOG.md` when version changes
-   Keep commits atomic and focused

### 3. API Response Format

-   **All API responses use camelCase** for field names
-   Use `#[serde(rename_all = "camelCase")]` on response structs
-   Maintain consistent response structure:

```json
{
  "code": 0,
  "message": "success",
  "data": { ... }
}
```

### 4. Error Handling Philosophy

-   **Handle all exceptions at the first exception site**
-   Never let database errors bubble up raw
-   Convert errors immediately where they occur:
    -   `sqlx::Error` → `ServiceError` in **repo layer** (at error source)
    -   `ServiceError` → `AppError` in routes layer (automatic conversion)
-   Use `Result<T, E>` consistently, avoid `unwrap()` in business code
-   Always log errors with context at the conversion site

### 5. Permission & Authentication

-   Permission checks at service entry points
-   Use declarative permission checking (e.g., `auth.check_permission("user:list")`)
-   JWT-based authentication with middleware
-   Context injection through extractors

## 🏗️ Architecture Principles

### Extreme Simplification

-   Eliminate unnecessary layers (handler, usecase, domain for CRUD)
-   Keep only essential abstractions
-   Prefer composition over inheritance
-   Each module should have clear, single responsibility

### AI-Friendly Design

-   Clear, predictable file structures
-   Consistent naming conventions
-   Minimal cognitive load for automated tools
-   Self-documenting code organization

### Maintainability First

-   Code should be easy to read and modify
-   Clear separation of concerns
-   Minimal coupling between modules
-   Easy to test and debug

## 📁 File Organization Standards

### Naming Conventions

-   Files: `snake_case` (e.g., `user_service.rs`)
-   Structs/Enums: `PascalCase` (e.g., `UserResponse`)
-   Functions/Variables: `snake_case` (e.g., `get_user_list`)
-   Database tables: `snake_case` (e.g., `sys_user`)

### Module Structure

Each feature module contains:

```
module/
├── mod.rs          // Module declarations
├── router.rs       // HTTP routing and handlers
├── service.rs      // Business logic
├── repo.rs         // Database operations
├── entity.rs       // Database entities
├── dto.rs          // Data transfer objects
└── vo.rs           // View objects (API responses)
```

**Example: System Management Module Structure**

```
features/
├── auth/           // Authentication module
└── system/         // System management module
    ├── mod.rs      // System module declarations
    ├── user/       // User management submodule
    │   ├── mod.rs
    │   ├── router.rs
    │   ├── service.rs
    │   ├── repo.rs
    │   ├── entity.rs
    │   ├── dto.rs
    │   └── vo.rs
    ├── role/       // Role management submodule
    │   ├── mod.rs
    │   ├── router.rs
    │   ├── service.rs
    │   ├── repo.rs
    │   ├── entity.rs
    │   ├── dto.rs
    │   └── vo.rs
    └── menu/       // Menu management submodule
        ├── mod.rs
        ├── router.rs
        ├── service.rs
        ├── repo.rs
        ├── entity.rs
        ├── dto.rs
        └── vo.rs
```

### Import Organization

```rust
// Standard library
use std::collections::HashMap;

// External crates
use axum::{Router, Json};
use sqlx::PgPool;

// Internal modules
use crate::common::{AppError, ApiResponse};
use crate::core::auth::AuthContext;

// Local modules
use super::entity::UserEntity;
```

## 🔧 Development Workflow

### Before Making Changes

1. Understand the existing architecture
2. Follow the three-layer principle (routes → service → repo)
3. Check existing patterns and conventions
4. Consider AI assistance for repetitive tasks

### Code Quality Standards

-   Use `clippy` for linting
-   Format with `rustfmt`
-   Write tests for business logic
-   Document complex functions
-   Use `tracing` for logging, not `println!`

### Database Changes

-   Follow Zen migration numbering system
-   One entity per migration file
-   Test migrations both ways (up and down)
-   Document complex schema changes

## 🤖 AI Collaboration Guidelines

### Leverage AI For

-   Code generation following established patterns
-   Bulk refactoring across modules
-   Migration file generation
-   Documentation updates
-   Test case generation

### Maintain Human Oversight For

-   Architecture decisions
-   Business logic validation
-   Security considerations
-   Performance optimizations
-   Database schema design

## 🚀 Future Evolution

### Planned Extensions

-   Docker containerization
-   Advanced RBAC system
-   API documentation automation
-   Performance monitoring
-   Logging and observability

### Principles for Growth

-   Maintain simplicity as complexity increases
-   Add layers only when absolutely necessary
-   Keep the core philosophy intact
-   Ensure new features follow established patterns

## 💭 Zen Thinking in Practice

When facing a decision, ask:

1. **Does this add genuine value?**
2. **Can this be simpler?**
3. **Will this be clear to others (including AI)?**
4. **Does this follow our established patterns?**
5. **Is this the minimal solution that works?**

Remember: **The best code is code that doesn't need to exist, but when it must exist, it should be crystal clear why.**
description:
globs:
alwaysApply: false

---
