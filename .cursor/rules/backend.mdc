---
globs: src/**/*.rs,Cargo.toml,Cargo.lock,justfile
description: Backend Rust development guidelines and conventions
---

# Backend Development Rules

## Project Structure

-   Main entry point: [src/main.rs](mdc:src/main.rs)
-   Core modules in [src/core/](mdc:src/core/) (app, db, jwt, password)
-   Features organized in [src/features/](mdc:src/features/) with auth and system modules
-   Common utilities in [src/common/](mdc:src/common/)
-   Middleware in [src/middleware/](mdc:src/middleware/)

## Dependency Management

-   **NEVER** directly modify [Cargo.toml](mdc:Cargo.toml)
-   Always use `cargo add <dependency>` for new dependencies
-   Obtain user confirmation before adding new dependencies
-   Keep [Cargo.lock](mdc:Cargo.lock) in version control

## Error Handling

-   All exceptions in querying data should be handled internally at the first exception site
-   Use proper error types and implement comprehensive error handling
-   Follow the error handling patterns in [src/common/error.rs](mdc:src/common/error.rs)

## API Conventions

-   All API responses MUST use camelCase for return value fields
-   Follow REST conventions for endpoint naming
-   Use proper HTTP status codes
-   Implement consistent response structures

## Code Organization

-   Each feature should have its own module with:
    -   `mod.rs` - Module declaration
    -   `entity.rs` - Database entities
    -   `dto.rs` - Data transfer objects
    -   `vo.rs` - Value objects
    -   `repo.rs` - Repository layer
    -   `service.rs` - Business logic
    -   `router.rs` - HTTP routing
-   Follow the pattern established in [src/features/system/user/](mdc:src/features/system/user/)

## Database Integration

-   Use the database connection pool from [src/core/db.rs](mdc:src/core/db.rs)
-   Follow repository pattern for data access
-   Use proper transaction handling where needed

## Authentication & Authorization

-   JWT handling in [src/core/jwt.rs](mdc:src/core/jwt.rs)
-   Password hashing in [src/core/password.rs](mdc:src/core/password.rs)
-   Auth middleware in [src/middleware/auth.rs](mdc:src/middleware/auth.rs)
-   Permission checking in [src/features/auth/permission.rs](mdc:src/features/auth/permission.rs)

## Logging

-   Use structured logging throughout the application
-   Log middleware in [src/middleware/log.rs](mdc:src/middleware/log.rs)
-   Follow consistent logging patterns for debugging and monitoring
