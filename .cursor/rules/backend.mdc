---
description:
globs: backend/*
alwaysApply: false
---
🧱 rustzen-admin 后端开发规范（Backend Development Rules）

本规范适用于 rustzen-admin 项目的后端模块，使用 Rust + Axum + SQLx 构建，旨在提升代码一致性、可维护性、可测试性与协作效率，适配 AI 编程工具如 Cursor 等辅助开发工具。
执行任何命令的时候，请先确保在 backend 文件夹中，如果不在，请使用 `cd backend`。

⸻

�� 1. 项目结构约定（模块化分层）

`src/`
├── `main.rs`              // 启动入口
├── `common/`              // 通用模块
│   └── `api.rs`           // 定义了 ApiResponse, AppError, ServiceError 等
├── `core/`                // 核心功能模块（JWT、密码处理等）
│   └── `jwt.rs`
├── `features/`            // 业务模块（按功能拆分）
│   ├── `auth/`            // 认证模块
│   └── `system/`          // 系统管理模块
│       ├── `user/`
│       ├── `role/`
│       └── `menu/`
└── ...

每个业务模块（如 `user`）都遵循相同的内部结构：
*   `routes.rs`: 定义路由和处理器。
*   `service.rs`: 实现核心业务逻辑。
*   `repo.rs`: 负责数据库交互。
*   `model.rs`: 定义数据模型和API结构体。
*   `mod.rs`: 声明模块。

⸻

🧩 2. 模块职责说明 (Layered Architecture)

后端采用严格的分层架构，确保职责分离。

| 文件         | 核心职责                                                                                                                              | 示例链接                                                                    |
| :----------- | :------------------------------------------------------------------------------------------------------------------------------------ | :-------------------------------------------------------------------------- |
| **`routes.rs`**  | **路由层**: 接收HTTP请求，解析参数，调用 `Service` 层，并将结果（成功或失败）转换为 `AppResult`。 **禁止包含任何业务逻辑**。         | [user routes](mdc:backend/src/features/system/user/routes.rs)   |
| **`service.rs`** | **服务层**: 处理核心业务逻辑。它不关心HTTP，只负责执行业务规则，调用 `Repo` 层。函数返回 `Result<T, ServiceError>`。 | [user service](mdc:backend/src/features/system/user/service.rs) |
| **`repo.rs`**    | **仓库层**: 负责与数据库的所有交互（增删改查）。函数返回 `Result<T, sqlx::Error>`。                                                | [user repository](mdc:backend/src/features/system/user/repo.rs) |
| **`model.rs`**   | **模型层**: 定义数据库实体 (`Entity`)、API请求 (`Request`) 和响应 (`Response`) 的数据结构。                                          | [user models](mdc:backend/src/features/system/user/model.rs)    |

⸻

🔧 3. 核心错误处理机制

这是新架构的核心，确保了业务错误与Web层的解耦。

1.  **`ServiceError`** ([common/api.rs](mdc:backend/src/common/api.rs))
    *   **用途**: 定义所有**业务逻辑**可能出现的失败情况，如 `NotFound`, `Conflict`, `InvalidCredentials`。
    *   **位置**: 在 `Service` 层创建并返回。一个服务函数的签名必须是 `async fn(...) -> Result<T, ServiceError>`。

2.  **`AppError`** ([common/api.rs](mdc:backend/src/common/api.rs))
    *   **用途**: `ServiceError` 的一个包装器，它实现了Axum的 `IntoResponse` Trait。
    *   **功能**: 负责将一个业务 `ServiceError` **映射**成一个具体的HTTP状态码和JSON错误响应体。

3.  **处理流程**
    *   `Repo` 层返回一个 `sqlx::Error`。
    *   `Service` 层捕获 `sqlx::Error`，并将其 `.map_err()` 转换为一个具体的 `ServiceError`（例如 `ServiceError::DatabaseQueryFailed`）。
    *   `Route` 处理器调用服务方法，并使用 `?` 操作符。如果服务返回 `Err(ServiceError)`，`?` 会借助 `From<ServiceError> for AppError` 的实现，自动将其转换为 `AppError` 并从处理器返回。
    *   Axum捕获到 `AppError` 并调用 `into_response()`，将标准化的错误JSON发送给客户端。

⸻

🚀 4. 如何新增一个API端点

请严格遵循以下步骤：

1.  **定义模型 (`model.rs`)**:
    *   在对应模块的 `model.rs` 中创建请求和响应的结构体。
    *   为请求结构体派生 `Deserialize`，为响应结构体派生 `Serialize`。

2.  **实现仓库逻辑 (`repo.rs`)**:
    *   如果需要，添加新的数据库查询函数。函数应返回 `Result<T, sqlx::Error>`。

3.  **实现业务逻辑 (`service.rs`)**:
    *   创建新的 `async` 函数，调用仓库函数，并处理任何业务规则。
    *   函数签名必须是 `async fn(...) -> Result<ResponseType, ServiceError>`。

4.  **创建路由处理器 (`routes.rs`)**:
    *   创建一个 `async` 处理器函数，其签名必须是 `async fn(...) -> AppResult<Json<ApiResponse<ResponseType>>>`。
    *   函数体非常简洁：提取参数 -> 调用服务方法 -> `Ok(ApiResponse::success(response))`。
    *   使用 `?` 来自动处理错误。

5.  **注册路由**:
    *   在 `routes.rs` 的路由表中添加新路径和处理器。

⸻

🎯 5. 命名与风格

| 类型 | 命名风格 | 示例 |
| :--- | :--- | :--- |
| 文件名 | `snake_case` | `user_service.rs` |
| Struct | `PascalCase` | `UserResponse`, `CreateUserRequest` |
| Enum | `PascalCase` | `ServiceError` |
| 函数 | `snake_case` | `get_user_list()` |
| 数据库表名 | `snake_case` | `sys_user`, `sys_role` |

*   **API序列化**: 对外API响应体和请求体，统一使用 `#[serde(rename_all = "camelCase")]`。

⸻

✅ 6. 代码质量建议
*   **严禁 `unwrap()` / `expect()`**: 在业务代码中严禁使用它们，所有可能失败的操作都必须通过 `Result` 和 `?` 处理。
*   **日志**: 在 `Service` 层的关键业务节点使用 `tracing` 添加日志。
*   **AI 友好**: 保持各层职责单一，使AI工具能更好地理解和修改特定部分的代码。 handler层仅做参数提取和调用，service层专注业务逻辑，repo层专注db交互。

⸻

本规范适用于 Cursor rules/backend.md，请遵循以上规则进行开发。
