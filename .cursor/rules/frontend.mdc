---
description: Frontend React/TypeScript development guidelines and conventions
globs: web/**/*.ts,web/**/*.tsx,web/**/*.js,web/**/*.json,web/**/*.css
alwaysApply: false
---

# Frontend Development Rules

## Project Structure

-   Entry point: [web/src/main.tsx](mdc:web/src/main.tsx)
-   Main HTML: [web/index.html](mdc:web/index.html)
-   Configuration files: [web/package.json](mdc:web/package.json), [web/vite.config.ts](mdc:web/vite.config.ts)
-   Styling: [web/tailwind.config.js](mdc:web/tailwind.config.js), [web/src/index.css](mdc:web/src/index.css)

## Code Organization

-   **Pages**: Feature pages in [web/src/pages/](mdc:web/src/pages/)
-   **Components**: Reusable components in [web/src/components/](mdc:web/src/components/)
-   **Layouts**: Layout components in [web/src/layouts/](mdc:web/src/layouts/)
-   **API**: API integration in [web/src/api/](mdc:web/src/api/)
-   **Stores**: State management in [web/src/stores/](mdc:web/src/stores/)
-   **Types**: TypeScript definitions in [web/src/types/](mdc:web/src/types/)
-   **Router**: Routing configuration in [web/src/router/](mdc:web/src/router/)

## TypeScript Conventions

-   Use strict TypeScript configuration from [web/tsconfig.json](mdc:web/tsconfig.json)
-   Define interfaces in [web/src/types/](mdc:web/src/types/) directory
-   Use proper type definitions for API responses
-   Follow naming conventions: PascalCase for interfaces, camelCase for variables

## Component Architecture

-   Use functional components with hooks
-   Follow the modal form pattern established in components like [web/src/pages/system/user/UserModalForm.tsx](mdc:web/src/pages/system/user/UserModalForm.tsx)
-   Implement consistent props interfaces
-   Use proper component composition

## State Management

-   Use custom hooks for state management as shown in [web/src/stores/useAuthStore.ts](mdc:web/src/stores/useAuthStore.ts)
-   Keep state close to where it's used
-   Use proper state lifting patterns

## API Integration

-   Use the centralized API structure from [web/src/api/](mdc:web/src/api/)
-   Follow the request patterns in [web/src/api/request.ts](mdc:web/src/api/request.ts)
-   Implement proper error handling for API calls
-   Use consistent response typing

## Styling Guidelines

-   Use Tailwind CSS for styling
-   Follow the configuration in [web/tailwind.config.js](mdc:web/tailwind.config.js)
-   Maintain consistent spacing and color schemes
-   Use responsive design patterns

## Routing

-   Use React Router configuration from [web/src/router/](mdc:web/src/router/)
-   Follow the routing patterns established in [web/src/router/system.tsx](mdc:web/src/router/system.tsx)
-   Implement proper route guards for authentication

## Development Tools

-   Use ESLint configuration from [web/eslint.config.js](mdc:web/eslint.config.js)
-   Follow Prettier configuration from [web/prettier.config.ts](mdc:web/prettier.config.ts)
-   Use Vite for development and building

## File Naming

-   Use PascalCase for component files (e.g., `UserModalForm.tsx`)
-   Use camelCase for utility files and hooks
-   Use kebab-case for CSS files and assets
-   Use descriptive names that reflect component purpose
