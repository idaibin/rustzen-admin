# rustzen-admin API Test Suite
# Use with VSCode REST Client extension

### Environment Variables
@baseUrl = http://localhost:8000
@apiUrl = {{baseUrl}}/api
@token = <your-jwt-token-here>

### ========== Auth ========== ###

# 1. Login
POST {{apiUrl}}/auth/login
Content-Type: application/json

{
  "username": "superadmin",
  "password": "rustzen@123"
}

# 2. Get current user info (requires token)
GET {{apiUrl}}/auth/me
Authorization: Bearer {{token}}

# 3. Logout (requires token)
GET {{apiUrl}}/auth/logout
Authorization: Bearer {{token}}

### ========== User Management ========== ###

# 4. List users (pagination, filter)
GET {{apiUrl}}/system/users?current=1&pageSize=10&username=admin&status=1
Accept: application/json
Authorization: Bearer {{token}}

# 5. Get user by ID
GET {{apiUrl}}/system/users/1
Accept: application/json
Authorization: Bearer {{token}}

# 6. Create user
POST {{apiUrl}}/system/users
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "username": "newuser",
  "email": "newuser@example.com",
  "password": "password123",
  "realName": "New User",
  "status": 1,
  "roleIds": [1]
}

# 7. Update user
PUT {{apiUrl}}/system/users/1
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "email": "updated@example.com",
  "realName": "Updated User",
  "status": 2,
  "roleIds": [1, 2]
}

# 8. Delete user
DELETE {{apiUrl}}/system/users/1
Authorization: Bearer {{token}}

# 9. User options (dropdown)
GET {{apiUrl}}/system/users/options?q=admin&limit=5
Accept: application/json
Authorization: Bearer {{token}}

# 10. User status options (no token required)
GET {{apiUrl}}/system/users/status-options
Accept: application/json

### ========== Role Management ========== ###

# 11. List roles (pagination, filter)
GET {{apiUrl}}/system/roles?current=1&pageSize=10&roleName=admin&status=1
Accept: application/json
Authorization: Bearer {{token}}

# 12. Get role by ID
GET {{apiUrl}}/system/roles/1
Accept: application/json
Authorization: Bearer {{token}}

# 13. Create role
POST {{apiUrl}}/system/roles
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "roleName": "editor",
  "status": 1,
  "menuIds": [1, 2]
}

# 14. Update role
PUT {{apiUrl}}/system/roles/1
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "roleName": "editor-updated",
  "status": 1,
  "menuIds": [1, 2, 3]
}

# 15. Delete role
DELETE {{apiUrl}}/system/roles/1
Authorization: Bearer {{token}}

# 16. Role options (dropdown)
GET {{apiUrl}}/system/roles/options?q=admin&limit=5
Accept: application/json
Authorization: Bearer {{token}}

### ========== Menu Management ========== ###

# 17. List menus (filter)
GET {{apiUrl}}/system/menus?title=Dashboard&status=1
Accept: application/json
Authorization: Bearer {{token}}

# 18. Get menu by ID
GET {{apiUrl}}/system/menus/1
Accept: application/json
Authorization: Bearer {{token}}

# 19. Create menu
POST {{apiUrl}}/system/menus
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "parentId": null,
  "title": "New Menu",
  "path": "/new-menu",
  "component": "NewMenuComponent",
  "icon": "menu-icon",
  "sortOrder": 1,
  "status": 1
}

# 20. Update menu
PUT {{apiUrl}}/system/menus/1
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "title": "Updated Menu",
  "status": 1
}

# 21. Delete menu
DELETE {{apiUrl}}/system/menus/1
Authorization: Bearer {{token}}

# 22. Menu options (dropdown)
GET {{apiUrl}}/system/menus/options?q=dashboard&limit=5
Accept: application/json
Authorization: Bearer {{token}}

### ========== Dictionary Management ========== ###

# 23. List dictionary items
GET {{apiUrl}}/system/dicts
Accept: application/json
Authorization: Bearer {{token}}

# 24. Dictionary options (dropdown)
GET {{apiUrl}}/system/dicts/options?dictType=user_status
Accept: application/json
Authorization: Bearer {{token}}

### ========== Log Management ========== ###

# 25. List logs (pagination, filter)
GET {{apiUrl}}/system/logs?current=1&pageSize=10&q=login
Accept: application/json
Authorization: Bearer {{token}}

# 26. Get log by ID
GET {{apiUrl}}/system/logs/1
Accept: application/json
Authorization: Bearer {{token}}